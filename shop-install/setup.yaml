---
- hosts: app_nodes
  become: yes
  vars:
    app_url: https://github.com/w-piotr/vouchershop/releases/download/v0.1/vouchershop.jar
    java_rpm_url: https://corretto.aws/downloads/latest/amazon-corretto-11-x64-al2-jre.rpm
    app_dest_dir: /opt/vouchershop
    app_user: vouchershop 
  tasks:
    - name: install java
      yum:
        name: "{{ java_rpm_url }}"
    - name: create user
      user:
        name: "{{ app_user }}"
    - name: create dir structure
      file:
        path: "{{ app_dest_dir }}"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        state: directory
    - name: download app jar file
      get_url:
        url: "{{ app_url }}"
        dest: "{{ app_dest_dir }}"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
    - name: put systemd cfg
      template:
        src: files/systemd/vouchershop.service
        dest: /etc/systemd/system/vouchershop.service
    - name: enable service on boot
      systemd:
        name: vouchershop
        daemon_reload: yes
        enabled: yes
        state: restarted

- hosts: web_nodes
  vars:
    epel_rpm_url: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    certbot_rpm_url: https://download-ib01.fedoraproject.org/pub/epel/7/x86_64/Packages/c/certbot-1.11.0-1.el7.noarch.rpm
    app_nodes:
      - 172.31.41.81:3000
      - 172.31.39.74:8080
      - 172.31.46.239:8080
    #my domain does not exists
    domain_name: vouchershop.wojaczek.pl
    domain_owner_email: wojaczek-piotr@wp.pl
  become: yes
  tasks:
    - name: install epel repository
      yum:
        name: "{{ epel_rpm_url }}"
    - name: install nginx
      yum:
        name: nginx
    - name: upload nginx config into etc
      template:
        src: files/nginx/vouchershop.conf
        dest: /etc/nginx/conf.d/vouchershop.conf
    - name: install certbot
      yum:
        name: "{{ certbot_rpm_url }}"
    - name: install certbot pluggin
      yum:
        name: certbot-nginx
    - name: restart nginx
      systemd:
        name: nginx
        enabled: yes
        state: restarted
    - name: install cert
      command:
        cmd: certbot -i nginx --nginx -d "{{ domain_name }}" -m "{{ domain_owner_email }}" --agree-tos --redirect

- hosts: stats_db
  vars:
    influx_db_rpm_url: https://dl.influxdata.com/influxdb/releases/influxdb-1.8.4.x86_64.rpm
    telegraf_rpm_url: https://dl.influxdata.com/telegraf/releases/telegraf-1.16.2-1.x86_64.rpm
    grafana_rpm_url: https://dl.grafana.com/oss/release/grafana-7.3.7-1.x86_64.rpm
    metrics_db_name: infrastructure
    grafana_url: http://127.0.0.1:3000
    grafana_user: admin
    grafana_pw: NewAdminP$
  become: yes
  tasks:
    - name: install telegraf
      yum:
        name: "{{ telegraf_rpm_url }}"
    - name: upload telegraf config
      template:
        src: files/telegraf/telegraf.conf
        dest: /etc/telegraf/telegraf.conf
    - name: install inlfux db
      yum:
        name: "{{ influx_db_rpm_url }}"
    - name: start service influx
      service:
        name: influxdb
        state: started
    - yum:
        name: python2-pip
    - name: install influx db dependencies
      pip:
        name: influxdb
    - name: create influx db
      community.general.influxdb_database:
        database_name: "{{ metrics_db_name }}"
    - name: install grafana
      yum:
        name: "{{ grafana_rpm_url }}"
    - name: start telegraf
      service:
        name: telegraf
        state: restarted
    - name: upload grafana config
      template:
        src: files/grafana/grafana.ini
        dest: /etc/grafana/grafana.ini
    - name: start grafana
      service:
        name: grafana-server
        state: restarted
    - name: Create influxdb datasource
      community.grafana.grafana_datasource:
        name: "InfluxDB"
        grafana_url: "{{ grafana_url }}"
        grafana_user: "{{ grafana_user }}"
        grafana_password: "{{ grafana_pw }}"
        ds_type: "influxdb"
        ds_url: "http://127.0.0.1:8086"
        database: "{{ metrics_db_name }}"
        time_interval: ">10s"
    - name: upload grafana dashboard
      copy:
        src: files/grafana/dashboard.json
        dest: /tmp/dashboard.json
    - name: import grafana dashboard
      community.grafana.grafana_dashboard:
        grafana_url: "{{ grafana_url }}"
        grafana_user: "{{ grafana_user }}"
        grafana_password: "{{ grafana_pw }}"
        state: present
        commit_message: Updated by ansible
        overwrite: yes
        path: /tmp/dashboard.json
